{"ast":null,"code":"import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nfunction GroupCell(_ref) {\n  var id = _ref.id,\n      rowIdx = _ref.rowIdx,\n      groupKey = _ref.groupKey,\n      childRows = _ref.childRows,\n      isExpanded = _ref.isExpanded,\n      isCellSelected = _ref.isCellSelected,\n      isRowSelected = _ref.isRowSelected,\n      eventBus = _ref.eventBus,\n      column = _ref.column,\n      groupColumnIndex = _ref.groupColumnIndex;\n\n  function toggleGroup() {\n    eventBus.dispatch('ToggleGroup', id);\n  }\n\n  function onRowSelectionChange(checked) {\n    eventBus.dispatch('SelectRow', {\n      rowIdx: rowIdx,\n      checked: checked,\n      isShiftClick: false\n    });\n  } // Only make the cell clickable if the group level matches\n\n\n  var isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n  return React.createElement(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    key: column.key,\n    className: clsx('rdg-cell', {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn,\n      'rdg-cell-selected': isCellSelected\n    }),\n    style: {\n      width: column.width,\n      left: column.left,\n      cursor: isLevelMatching ? 'pointer' : 'default'\n    },\n    onClick: isLevelMatching ? toggleGroup : undefined\n  }, column.groupFormatter && (!column.rowGroup || groupColumnIndex === column.idx) && React.createElement(column.groupFormatter, {\n    groupKey: groupKey,\n    childRows: childRows,\n    column: column,\n    isExpanded: isExpanded,\n    isCellSelected: isCellSelected,\n    isRowSelected: isRowSelected,\n    onRowSelectionChange: onRowSelectionChange,\n    toggleGroup: toggleGroup\n  }));\n}\n\nexport default memo(GroupCell);","map":null,"metadata":{},"sourceType":"module"}