{"ast":null,"code":"import React, { createElement } from 'react';\nimport clsx from 'clsx';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport ResizableHeaderCell from './headerCells/ResizableHeaderCell';\n\nfunction getAriaSort(sortDirection) {\n  switch (sortDirection) {\n    case 'ASC':\n      return 'ascending';\n\n    case 'DESC':\n      return 'descending';\n\n    default:\n      return 'none';\n  }\n}\n\nexport default function HeaderCell(_ref) {\n  var column = _ref.column,\n      onResize = _ref.onResize,\n      allRowsSelected = _ref.allRowsSelected,\n      onAllRowsSelectionChange = _ref.onAllRowsSelectionChange,\n      sortColumn = _ref.sortColumn,\n      sortDirection = _ref.sortDirection,\n      onSort = _ref.onSort;\n\n  function getCell() {\n    if (!column.headerRenderer) return column.name;\n    return createElement(column.headerRenderer, {\n      column: column,\n      allRowsSelected: allRowsSelected,\n      onAllRowsSelectionChange: onAllRowsSelectionChange\n    });\n  }\n\n  var cell = getCell();\n\n  if (column.sortable) {\n    cell = React.createElement(SortableHeaderCell, {\n      column: column,\n      onSort: onSort,\n      sortColumn: sortColumn,\n      sortDirection: sortDirection\n    }, cell);\n  }\n\n  var className = clsx('rdg-cell', column.headerCellClass, {\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.isLastFrozenColumn\n  });\n  var style = {\n    width: column.width,\n    left: column.left\n  };\n  cell = React.createElement(\"div\", {\n    role: \"columnheader\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-sort\": sortColumn === column.key ? getAriaSort(sortDirection) : undefined,\n    className: className,\n    style: style\n  }, cell);\n\n  if (column.resizable) {\n    cell = React.createElement(ResizableHeaderCell, {\n      column: column,\n      onResize: onResize\n    }, cell);\n  }\n\n  return cell;\n}","map":null,"metadata":{},"sourceType":"module"}