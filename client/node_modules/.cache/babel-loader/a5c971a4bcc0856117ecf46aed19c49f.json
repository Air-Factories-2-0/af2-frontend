{"ast":null,"code":"import React, { cloneElement } from 'react';\nexport default function ResizableHeaderCell(_ref) {\n  var children = _ref.children,\n      column = _ref.column,\n      onResize = _ref.onResize;\n\n  function onMouseDown(event) {\n    if (event.button !== 0) {\n      return;\n    }\n\n    var currentTarget = event.currentTarget;\n\n    var _currentTarget$getBou = currentTarget.getBoundingClientRect(),\n        right = _currentTarget$getBou.right;\n\n    var offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    var onMouseMove = function onMouseMove(event) {\n      handleResize(event.clientX + offset, currentTarget);\n    };\n\n    var onMouseUp = function onMouseUp() {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n\n    event.preventDefault();\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('mouseup', onMouseUp);\n  }\n\n  function onTouchStart(event) {\n    var touch = event.changedTouches[0];\n    var identifier = touch.identifier;\n    var currentTarget = event.currentTarget;\n\n    var _currentTarget$getBou2 = currentTarget.getBoundingClientRect(),\n        right = _currentTarget$getBou2.right;\n\n    var offset = right - touch.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function getTouch(event) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = event.changedTouches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _touch = _step.value;\n          if (_touch.identifier === identifier) return _touch;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return null;\n    }\n\n    var onTouchMove = function onTouchMove(event) {\n      var touch = getTouch(event);\n\n      if (touch) {\n        handleResize(touch.clientX + offset, currentTarget);\n      }\n    };\n\n    var onTouchEnd = function onTouchEnd(event) {\n      var touch = getTouch(event);\n      if (!touch) return;\n      window.removeEventListener('touchmove', onTouchMove);\n      window.removeEventListener('touchend', onTouchEnd);\n    };\n\n    window.addEventListener('touchmove', onTouchMove);\n    window.addEventListener('touchend', onTouchEnd);\n  }\n\n  function handleResize(x, target) {\n    var width = x - target.getBoundingClientRect().left;\n\n    if (width > 0) {\n      onResize(column, width);\n    }\n  }\n\n  return cloneElement(children, {\n    onMouseDown: onMouseDown,\n    onTouchStart: onTouchStart,\n    children: React.createElement(React.Fragment, null, children.props.children, React.createElement(\"div\", {\n      className: \"rdg-header-cell-resizer\"\n    }))\n  });\n}","map":null,"metadata":{},"sourceType":"module"}