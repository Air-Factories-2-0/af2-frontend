{"ast":null,"code":"import _objectSpread from \"/home/costantinos/Documenti/Dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { canEdit } from './columnUtils';\nexport function isSelectedCellEditable(_ref) {\n  var selectedPosition = _ref.selectedPosition,\n      columns = _ref.columns,\n      rows = _ref.rows,\n      onCheckCellIsEditable = _ref.onCheckCellIsEditable,\n      isGroupRow = _ref.isGroupRow;\n  var column = columns[selectedPosition.idx];\n  var row = rows[selectedPosition.rowIdx];\n  if (column.rowGroup === true || isGroupRow(row)) return false;\n  var isCellEditable = onCheckCellIsEditable ? onCheckCellIsEditable(_objectSpread({\n    row: row,\n    column: column\n  }, selectedPosition)) : true;\n  return isCellEditable && canEdit(column, row);\n}\nexport function getNextSelectedCellPosition(_ref2) {\n  var cellNavigationMode = _ref2.cellNavigationMode,\n      columns = _ref2.columns,\n      rowsCount = _ref2.rowsCount,\n      nextPosition = _ref2.nextPosition;\n\n  if (cellNavigationMode !== 'NONE') {\n    var idx = nextPosition.idx,\n        rowIdx = nextPosition.rowIdx;\n    var columnsCount = columns.length;\n    var isAfterLastColumn = idx === columnsCount;\n    var isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        var isLastRow = rowIdx === rowsCount - 1;\n\n        if (!isLastRow) {\n          return {\n            idx: 0,\n            rowIdx: rowIdx + 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx: rowIdx,\n          idx: 0\n        };\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        var isFirstRow = rowIdx === 0;\n\n        if (!isFirstRow) {\n          return {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx: rowIdx,\n          idx: columnsCount - 1\n        };\n      }\n    }\n  }\n\n  return nextPosition;\n}\nexport function canExitGrid(_ref3) {\n  var cellNavigationMode = _ref3.cellNavigationMode,\n      columns = _ref3.columns,\n      rowsCount = _ref3.rowsCount,\n      _ref3$selectedPositio = _ref3.selectedPosition,\n      rowIdx = _ref3$selectedPositio.rowIdx,\n      idx = _ref3$selectedPositio.idx,\n      shiftKey = _ref3.shiftKey;\n\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    var atLastCellInRow = idx === columns.length - 1;\n    var atFirstCellInRow = idx === 0;\n    var atLastRow = rowIdx === rowsCount - 1;\n    var atFirstRow = rowIdx === 0;\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}