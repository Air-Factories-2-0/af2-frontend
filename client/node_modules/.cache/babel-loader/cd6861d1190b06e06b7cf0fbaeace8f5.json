{"ast":null,"code":"import _objectWithoutProperties from \"/home/costantinos/Documenti/Dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { forwardRef, memo, useRef } from 'react';\nimport clsx from 'clsx';\nimport { wrapEvent } from './utils';\nimport { useCombinedRefs } from './hooks';\n\nfunction Cell(_ref, ref) {\n  var className = _ref.className,\n      column = _ref.column,\n      isCellSelected = _ref.isCellSelected,\n      isCopied = _ref.isCopied,\n      isDraggedOver = _ref.isDraggedOver,\n      isRowSelected = _ref.isRowSelected,\n      row = _ref.row,\n      rowIdx = _ref.rowIdx,\n      eventBus = _ref.eventBus,\n      dragHandleProps = _ref.dragHandleProps,\n      onRowClick = _ref.onRowClick,\n      onFocus = _ref.onFocus,\n      onKeyDown = _ref.onKeyDown,\n      onClick = _ref.onClick,\n      onDoubleClick = _ref.onDoubleClick,\n      onContextMenu = _ref.onContextMenu,\n      props = _objectWithoutProperties(_ref, [\"className\", \"column\", \"isCellSelected\", \"isCopied\", \"isDraggedOver\", \"isRowSelected\", \"row\", \"rowIdx\", \"eventBus\", \"dragHandleProps\", \"onRowClick\", \"onFocus\", \"onKeyDown\", \"onClick\", \"onDoubleClick\", \"onContextMenu\"]);\n\n  var cellRef = useRef(null);\n  var cellClass = column.cellClass;\n  className = clsx('rdg-cell', {\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.isLastFrozenColumn,\n    'rdg-cell-selected': isCellSelected,\n    'rdg-cell-copied': isCopied,\n    'rdg-cell-dragged-over': isDraggedOver\n  }, typeof cellClass === 'function' ? cellClass(row) : cellClass, className);\n\n  function selectCell(openEditor) {\n    eventBus.dispatch('SelectCell', {\n      idx: column.idx,\n      rowIdx: rowIdx\n    }, openEditor);\n  }\n\n  function handleClick() {\n    var _a;\n\n    selectCell((_a = column.editorOptions) === null || _a === void 0 ? void 0 : _a.editOnClick);\n    onRowClick === null || onRowClick === void 0 ? void 0 : onRowClick(rowIdx, row, column);\n  }\n\n  function handleContextMenu() {\n    selectCell();\n  }\n\n  function handleDoubleClick() {\n    selectCell(true);\n  }\n\n  function onRowSelectionChange(checked, isShiftClick) {\n    eventBus.dispatch('SelectRow', {\n      rowIdx: rowIdx,\n      checked: checked,\n      isShiftClick: isShiftClick\n    });\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    ref: useCombinedRefs(cellRef, ref),\n    className: className,\n    style: {\n      width: column.width,\n      left: column.left\n    },\n    onFocus: onFocus,\n    onKeyDown: onKeyDown,\n    onClick: wrapEvent(handleClick, onClick),\n    onDoubleClick: wrapEvent(handleDoubleClick, onDoubleClick),\n    onContextMenu: wrapEvent(handleContextMenu, onContextMenu)\n  }, props), !column.rowGroup && React.createElement(React.Fragment, null, React.createElement(column.formatter, {\n    column: column,\n    rowIdx: rowIdx,\n    row: row,\n    isCellSelected: isCellSelected,\n    isRowSelected: isRowSelected,\n    onRowSelectionChange: onRowSelectionChange\n  }), dragHandleProps && React.createElement(\"div\", Object.assign({\n    className: \"rdg-cell-drag-handle\"\n  }, dragHandleProps))));\n}\n\nexport default memo(forwardRef(Cell));","map":null,"metadata":{},"sourceType":"module"}