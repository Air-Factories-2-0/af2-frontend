{"ast":null,"code":"import _objectWithoutProperties from \"/home/costantinos/Documenti/Dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { memo, forwardRef } from 'react';\nimport clsx from 'clsx';\nimport Cell from './Cell';\nimport EditCell from './EditCell';\nimport { wrapEvent } from './utils';\n\nfunction Row(_ref, ref) {\n  var _ref$cellRenderer = _ref.cellRenderer,\n      CellRenderer = _ref$cellRenderer === void 0 ? Cell : _ref$cellRenderer,\n      className = _ref.className,\n      eventBus = _ref.eventBus,\n      rowIdx = _ref.rowIdx,\n      isRowSelected = _ref.isRowSelected,\n      copiedCellIdx = _ref.copiedCellIdx,\n      draggedOverCellIdx = _ref.draggedOverCellIdx,\n      row = _ref.row,\n      viewportColumns = _ref.viewportColumns,\n      selectedCellProps = _ref.selectedCellProps,\n      onRowClick = _ref.onRowClick,\n      rowClass = _ref.rowClass,\n      setDraggedOverRowIdx = _ref.setDraggedOverRowIdx,\n      onMouseEnter = _ref.onMouseEnter,\n      top = _ref.top,\n      ariaRowIndex = _ref['aria-rowindex'],\n      ariaSelected = _ref['aria-selected'],\n      props = _objectWithoutProperties(_ref, [\"cellRenderer\", \"className\", \"eventBus\", \"rowIdx\", \"isRowSelected\", \"copiedCellIdx\", \"draggedOverCellIdx\", \"row\", \"viewportColumns\", \"selectedCellProps\", \"onRowClick\", \"rowClass\", \"setDraggedOverRowIdx\", \"onMouseEnter\", \"top\", \"aria-rowindex\", \"aria-selected\"]);\n\n  function handleDragEnter() {\n    setDraggedOverRowIdx === null || setDraggedOverRowIdx === void 0 ? void 0 : setDraggedOverRowIdx(rowIdx);\n  }\n\n  className = clsx('rdg-row', \"rdg-row-\".concat(rowIdx % 2 === 0 ? 'even' : 'odd'), {\n    'rdg-row-selected': isRowSelected,\n    'rdg-group-row-selected': (selectedCellProps === null || selectedCellProps === void 0 ? void 0 : selectedCellProps.idx) === -1\n  }, rowClass === null || rowClass === void 0 ? void 0 : rowClass(row), className);\n  return React.createElement(\"div\", Object.assign({\n    role: \"row\",\n    \"aria-rowindex\": ariaRowIndex,\n    \"aria-selected\": ariaSelected,\n    ref: ref,\n    className: className,\n    onMouseEnter: wrapEvent(handleDragEnter, onMouseEnter),\n    style: {\n      top: top\n    }\n  }, props), viewportColumns.map(function (column) {\n    var isCellSelected = (selectedCellProps === null || selectedCellProps === void 0 ? void 0 : selectedCellProps.idx) === column.idx;\n\n    if ((selectedCellProps === null || selectedCellProps === void 0 ? void 0 : selectedCellProps.mode) === 'EDIT' && isCellSelected) {\n      return React.createElement(EditCell, {\n        key: column.key,\n        rowIdx: rowIdx,\n        column: column,\n        row: row,\n        onKeyDown: selectedCellProps.onKeyDown,\n        editorPortalTarget: selectedCellProps.editorPortalTarget,\n        editorContainerProps: selectedCellProps.editorContainerProps,\n        editor2Props: selectedCellProps.editor2Props\n      });\n    }\n\n    return React.createElement(CellRenderer, {\n      key: column.key,\n      rowIdx: rowIdx,\n      column: column,\n      row: row,\n      isCopied: copiedCellIdx === column.idx,\n      isDraggedOver: draggedOverCellIdx === column.idx,\n      isCellSelected: isCellSelected,\n      isRowSelected: isRowSelected,\n      eventBus: eventBus,\n      dragHandleProps: isCellSelected ? selectedCellProps.dragHandleProps : undefined,\n      onFocus: isCellSelected ? selectedCellProps.onFocus : undefined,\n      onKeyDown: isCellSelected ? selectedCellProps.onKeyDown : undefined,\n      onRowClick: onRowClick\n    });\n  }));\n}\n\nexport default memo(forwardRef(Row));","map":null,"metadata":{},"sourceType":"module"}