{"ast":null,"code":"import _slicedToArray from \"/home/costantinos/Documenti/Dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/costantinos/Documenti/Dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { forwardRef, useState, useCallback } from 'react';\nimport clsx from 'clsx';\nimport { EditorContainer, EditorContainer2, EditorPortal } from './editors';\nimport { useCombinedRefs } from './hooks';\n\nfunction EditCell(_ref, ref) {\n  var className = _ref.className,\n      column = _ref.column,\n      row = _ref.row,\n      rowIdx = _ref.rowIdx,\n      editorPortalTarget = _ref.editorPortalTarget,\n      editorContainerProps = _ref.editorContainerProps,\n      editor2Props = _ref.editor2Props,\n      onKeyDown = _ref.onKeyDown,\n      props = _objectWithoutProperties(_ref, [\"className\", \"column\", \"row\", \"rowIdx\", \"editorPortalTarget\", \"editorContainerProps\", \"editor2Props\", \"onKeyDown\"]);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      dimensions = _useState2[0],\n      setDimensions = _useState2[1];\n\n  var cellRef = useCallback(function (node) {\n    if (node !== null) {\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          left = _node$getBoundingClie.left,\n          top = _node$getBoundingClie.top;\n\n      setDimensions({\n        left: left,\n        top: top\n      });\n    }\n  }, []);\n  var cellClass = column.cellClass;\n  className = clsx('rdg-cell', {\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.isLastFrozenColumn\n  }, 'rdg-cell-selected', 'rdg-cell-editing', typeof cellClass === 'function' ? cellClass(row) : cellClass, className);\n\n  function getCellContent() {\n    var _a, _b;\n\n    if (dimensions === null) return;\n\n    var _ref2 = (_a = document.scrollingElement) !== null && _a !== void 0 ? _a : document.documentElement,\n        docTop = _ref2.scrollTop,\n        docLeft = _ref2.scrollLeft;\n\n    var left = dimensions.left,\n        top = dimensions.top;\n    var gridLeft = left + docLeft;\n    var gridTop = top + docTop;\n\n    if (column.editor2 !== undefined) {\n      return React.createElement(EditorContainer2, Object.assign({}, editor2Props, {\n        editorPortalTarget: editorPortalTarget,\n        rowIdx: rowIdx,\n        column: column,\n        left: gridLeft,\n        top: gridTop\n      }));\n    }\n\n    var editor = React.createElement(EditorContainer, Object.assign({}, editorContainerProps, {\n      rowIdx: rowIdx,\n      row: row,\n      column: column,\n      left: gridLeft,\n      top: gridTop\n    }));\n\n    if (((_b = column.editorOptions) === null || _b === void 0 ? void 0 : _b.createPortal) !== false) {\n      return React.createElement(EditorPortal, {\n        target: editorPortalTarget\n      }, editor);\n    }\n\n    return editor;\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": true,\n    ref: useCombinedRefs(cellRef, ref),\n    className: className,\n    style: {\n      width: column.width,\n      left: column.left\n    },\n    onKeyDown: onKeyDown\n  }, props), getCellContent());\n}\n\nexport default forwardRef(EditCell);","map":null,"metadata":{},"sourceType":"module"}