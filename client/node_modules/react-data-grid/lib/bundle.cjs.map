{"version":3,"file":"bundle.cjs","sources":["../src/utils/domUtils.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/SimpleCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/Columns.tsx","../src/utils/columnUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/hooks/useCombinedRefs.ts","../src/hooks/useClickOutside.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/hooks/useFocusRef.tsx","../src/EventBus.ts","../src/headerCells/SortableHeaderCell.tsx","../src/headerCells/ResizableHeaderCell.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/FilterRow.tsx","../src/Cell.tsx","../src/editors/SimpleTextEditor.tsx","../src/editors/EditorPortal.tsx","../src/editors/EditorContainer.tsx","../src/editors/Editor2Container.tsx","../src/EditCell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx"],"sourcesContent":["export function preventDefault(event: React.SyntheticEvent) {\n  event.preventDefault();\n}\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function wrapEvent<E extends React.SyntheticEvent>(ourHandler: React.EventHandler<E>, theirHandler: React.EventHandler<E> | undefined) {\n  if (theirHandler === undefined) return ourHandler;\n\n  return function(event: E) {\n    ourHandler(event);\n    theirHandler(event);\n  };\n}\n","import React from 'react';\nimport clsx from 'clsx';\n\nimport { useFocusRef } from '../hooks';\n\ntype SharedInputProps = Pick<React.InputHTMLAttributes<HTMLInputElement>,\n  | 'disabled'\n  | 'tabIndex'\n  | 'onClick'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\nexport interface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected?: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const inputRef = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx('rdg-checkbox-label', { 'rdg-checkbox-label-disabled': disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        tabIndex={tabIndex}\n        ref={inputRef}\n        type=\"checkbox\"\n        className=\"rdg-checkbox-input\"\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className=\"rdg-checkbox\" />\n    </label>\n  );\n}\n","import React from 'react';\nimport { FormatterProps } from '../types';\n\nexport function SimpleCellFormatter({ row, column }: FormatterProps) {\n  const value = row[column.key];\n  return <span title={String(value)}>{value}</span>;\n}\n","import React from 'react';\nimport { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  return <>{props.row[props.column.key as keyof R]}</>;\n}\n","import React from 'react';\nimport { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks';\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const cellRef = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={cellRef}\n      className=\"rdg-group-cell-content\"\n      tabIndex={-1}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className=\"rdg-caret\">\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import React from 'react';\nimport { SelectCellFormatter } from './formatters';\nimport { Column } from './types';\nimport { stopPropagation } from './utils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onClick={stopPropagation}\n        onChange={props.onRowSelectionChange}\n      />\n    );\n  },\n  groupFormatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select Group\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onChange={props.onRowSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  }\n};\n","import { Column, CalculatedColumn, FormatterProps } from '../types';\nimport { ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\n\ninterface Metrics<R, SR> {\n  rawColumns: readonly Column<R, SR>[];\n  columnWidths: ReadonlyMap<string, number>;\n  minColumnWidth: number;\n  viewportWidth: number;\n  defaultResizable: boolean;\n  defaultSortable: boolean;\n  defaultFormatter: React.ComponentType<FormatterProps<R, SR>>;\n  rawGroupBy?: readonly string[];\n}\n\ninterface ColumnMetrics<TRow, TSummaryRow> {\n  columns: readonly CalculatedColumn<TRow, TSummaryRow>[];\n  lastFrozenColumnIndex: number;\n  totalFrozenColumnWidth: number;\n  totalColumnWidth: number;\n  groupBy: readonly string[];\n}\n\nexport function getColumnMetrics<R, SR>(metrics: Metrics<R, SR>): ColumnMetrics<R, SR> {\n  let left = 0;\n  let totalWidth = 0;\n  let allocatedWidths = 0;\n  let unassignedColumnsCount = 0;\n  let lastFrozenColumnIndex = -1;\n  type IntermediateColumn = Column<R, SR> & { width: number | undefined; rowGroup?: boolean };\n  let totalFrozenColumnWidth = 0;\n  const { rawGroupBy } = metrics;\n\n  const columns = metrics.rawColumns.map(metricsColumn => {\n    let width = getSpecifiedWidth(metricsColumn, metrics.columnWidths, metrics.viewportWidth);\n\n    if (width === undefined) {\n      unassignedColumnsCount++;\n    } else {\n      width = clampColumnWidth(width, metricsColumn, metrics.minColumnWidth);\n      allocatedWidths += width;\n    }\n\n    const column: IntermediateColumn = { ...metricsColumn, width };\n\n    if (rawGroupBy?.includes(column.key)) {\n      column.frozen = true;\n      column.rowGroup = true;\n    }\n\n    if (column.frozen) {\n      lastFrozenColumnIndex++;\n    }\n\n    return column;\n  });\n\n  columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n    // Sort select column first:\n    if (aKey === SELECT_COLUMN_KEY) return -1;\n    if (bKey === SELECT_COLUMN_KEY) return 1;\n\n    // Sort grouped columns second, following the groupBy order:\n    if (rawGroupBy?.includes(aKey)) {\n      if (rawGroupBy.includes(bKey)) {\n        return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n      }\n      return -1;\n    }\n    if (rawGroupBy?.includes(bKey)) return 1;\n\n    // Sort frozen columns third:\n    if (frozenA) {\n      if (frozenB) return 0;\n      return -1;\n    }\n    if (frozenB) return 1;\n\n    // Sort other columns last:\n    return 0;\n  });\n\n  const unallocatedWidth = metrics.viewportWidth - allocatedWidths;\n  const unallocatedColumnWidth = Math.max(\n    Math.floor(unallocatedWidth / unassignedColumnsCount),\n    metrics.minColumnWidth\n  );\n\n  // Filter rawGroupBy and ignore keys that do not match the columns prop\n  const groupBy: string[] = [];\n  const calculatedColumns: CalculatedColumn<R, SR>[] = columns.map((column, idx) => {\n    // Every column should have a valid width as this stage\n    const width = column.width ?? clampColumnWidth(unallocatedColumnWidth, column, metrics.minColumnWidth);\n    const newColumn = {\n      ...column,\n      idx,\n      width,\n      left,\n      sortable: column.sortable ?? metrics.defaultSortable,\n      resizable: column.resizable ?? metrics.defaultResizable,\n      formatter: column.formatter ?? metrics.defaultFormatter\n    };\n\n    if (newColumn.rowGroup) {\n      groupBy.push(column.key);\n      newColumn.groupFormatter = column.groupFormatter ?? ToggleGroupFormatter;\n    }\n\n    totalWidth += width;\n    left += width;\n    return newColumn;\n  });\n\n  if (lastFrozenColumnIndex !== -1) {\n    const lastFrozenColumn = calculatedColumns[lastFrozenColumnIndex];\n    lastFrozenColumn.isLastFrozenColumn = true;\n    totalFrozenColumnWidth = lastFrozenColumn.left + lastFrozenColumn.width;\n  }\n\n  return {\n    columns: calculatedColumns,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    totalColumnWidth: totalWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return Math.floor(viewportWidth * parseInt(width, 10) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = Math.max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return Math.min(width, maxWidth);\n  }\n\n  return width;\n}\n\n// Logic extented to allow for functions to be passed down in column.editable\n// this allows us to decide whether we can be editing from a cell level\nexport function canEdit<R, SR>(column: Column<R, SR>, row: R): boolean {\n  if (typeof column.editable === 'function') {\n    return column.editable(row);\n  }\n  return Boolean(column.editor ?? column.editor2 ?? column.editable);\n}\n\nexport function getColumnScrollPosition<R, SR>(columns: readonly CalculatedColumn<R, SR>[], idx: number, currentScrollLeft: number, currentClientWidth: number): number {\n  let left = 0;\n  let frozen = 0;\n\n  for (let i = 0; i < idx; i++) {\n    const column = columns[i];\n    if (column) {\n      if (column.width) {\n        left += column.width;\n      }\n      if (column.frozen) {\n        frozen += column.width;\n      }\n    }\n  }\n\n  const selectedColumn = columns[idx];\n  if (selectedColumn) {\n    const scrollLeft = left - frozen - currentScrollLeft;\n    const scrollRight = left + selectedColumn.width - currentScrollLeft;\n\n    if (scrollLeft < 0) {\n      return scrollLeft;\n    }\n    if (scrollRight > currentClientWidth) {\n      return scrollRight - currentClientWidth;\n    }\n  }\n\n  return 0;\n}\n","export function isKeyPrintable(keycode: number): boolean {\n  return (keycode > 47 && keycode < 58) // number keys\n    || keycode === 32 || keycode === 13 // spacebar & return key(s) (if you want to allow carriage returns)\n    || (keycode > 64 && keycode < 91) // letter keys\n    || (keycode > 95 && keycode < 112) // numpad keys\n    || (keycode > 185 && keycode < 193) // ;=,-./` (in order)\n    || (keycode > 218 && keycode < 223); // [\\]' (in order)\n}\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n  return isKeyPrintable(event.keyCode) || ['Enter', 'F2', 'Backspace', 'Delete'].includes(event.key);\n}\n","import { CellNavigationMode } from '../enums';\nimport { canEdit } from './columnUtils';\nimport { CalculatedColumn, Position, GroupRow } from '../types';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  onCheckCellIsEditable?: (arg: { row: R; column: CalculatedColumn<R, SR> } & Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({ selectedPosition, columns, rows, onCheckCellIsEditable, isGroupRow }: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  if (column.rowGroup === true || isGroupRow(row)) return false;\n  const isCellEditable = onCheckCellIsEditable ? onCheckCellIsEditable({ row, column, ...selectedPosition }) : true;\n  return isCellEditable && canEdit<R, SR>(column, row);\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  nextPosition: Position;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({ cellNavigationMode, columns, rowsCount, nextPosition }: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  if (cellNavigationMode !== 'NONE') {\n    const { idx, rowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const isAfterLastColumn = idx === columnsCount;\n    const isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = rowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          return {\n            idx: 0,\n            rowIdx: rowIdx + 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: 0\n        };\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = rowIdx === 0;\n        if (!isFirstRow) {\n          return {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: columnsCount - 1\n        };\n      }\n    }\n  }\n\n  return nextPosition;\n}\n\ninterface CanExitGridOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid<R, SR>({ cellNavigationMode, columns, rowsCount, selectedPosition: { rowIdx, idx }, shiftKey }: CanExitGridOpts<R, SR>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","export * from './domUtils';\nexport * from './columnUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport function assertIsValidKey<R>(key: unknown): asserts key is keyof R {\n  if (key === undefined) {\n    throw new Error('Please specify the rowKey prop to use selection');\n  }\n}\n\nexport function wrapRefs<T>(...refs: readonly React.Ref<T>[]) {\n  return (handle: T | null) => {\n    for (const ref of refs) {\n      if (typeof ref === 'function') {\n        ref(handle);\n      } else if (ref !== null) {\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n        // @ts-expect-error\n        ref.current = handle;\n      }\n    }\n  };\n}\n","import { useMemo } from 'react';\nimport { wrapRefs } from '../utils';\n\nexport function useCombinedRefs<T>(...refs: readonly React.Ref<T>[]) {\n  return useMemo(\n    () => wrapRefs<T>(...refs),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs\n  );\n}\n","import { useRef, useEffect } from 'react';\n\n/**\n * Detecting outside click on a react component is surprisingly hard.\n * A general approach is to have a global click handler on the document\n * which checks if the click target is inside the editor container or\n * not using editorContainer.contains(e.target). This approach works well\n * until portals are used for editors. Portals render children into a DOM\n * node that exists outside the DOM hierarchy of the parent component so\n * editorContainer.contains(e.target) does not work. Here are some examples\n * of the DOM structure with different types of editors\n *\n *\n * SimpleEditor for example Texbox (No Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        <div simple-editor>..</div>\n *      </div>\n *   </div>\n *\n * ComplexEditor for example Modals (using Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        // Nothing here\n *      </div>\n *   </div>\n *   <div portal-created-by-the-editor>\n *     <div complex-editor>..</div>\n *   </div>\n *\n *\n * One approach to detect outside click is to use synthetic event bubbling through\n * portals. An event fired from inside a portal will propagate to ancestors\n * in the containing React tree, even if those elements are not ancestors\n * in the DOM tree. This means a click handler can be attached on the window\n * and on the editor container. The editor container can set a flag to notify\n * that the click was inside the editor and the window click handler can use\n * this flag to call onClickOutside. This approach however has a few caveats\n * - Click handler on the window is set using window.addEventListener\n * - Click handler on the editor container is set using onClick prop\n *\n * This means if a child component inside the editor calls e.stopPropagation\n * then the click handler on the editor container will not be called whereas\n * the document click handler will be called.\n * https://github.com/facebook/react/issues/12518\n *\n * To solve this issue onClickCapture event is used.\n */\n\nexport function useClickOutside(onClick: () => void) {\n  const clickedInsideRef = useRef(false);\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `handleDocumentClick` might otherwise miss valid click events.\n  // To that end we instead access the latest `onClick` prop via a ref.\n  const onClickRef = useRef((): void => {\n    throw new Error('Cannot call an event handler while rendering.');\n  });\n\n  useEffect(() => {\n    onClickRef.current = onClick;\n  });\n\n  useEffect(() => {\n    let animationFrameRequest: number | undefined;\n\n    function cancelAnimationFrameRequest() {\n      if (typeof animationFrameRequest === 'number') {\n        cancelAnimationFrame(animationFrameRequest);\n        animationFrameRequest = undefined;\n      }\n    }\n\n    function checkOutsideClick() {\n      animationFrameRequest = undefined;\n\n      if (clickedInsideRef.current) {\n        clickedInsideRef.current = false;\n      } else {\n        onClickRef.current();\n      }\n    }\n\n    function handleWindowCaptureClick() {\n      cancelAnimationFrameRequest();\n      clickedInsideRef.current = false;\n      animationFrameRequest = requestAnimationFrame(checkOutsideClick);\n    }\n\n    window.addEventListener('click', handleWindowCaptureClick, { capture: true });\n\n    return () => {\n      window.removeEventListener('click', handleWindowCaptureClick, { capture: true });\n      cancelAnimationFrameRequest();\n    };\n  }, []);\n\n  return function onClickCapture() {\n    clickedInsideRef.current = true;\n  };\n}\n","import { useRef, useState, useLayoutEffect } from 'react';\n\n// https://github.com/microsoft/TypeScript/issues/37861\ninterface ResizeObserverEntry {\n  contentRect: {\n    width: number;\n    height: number;\n  };\n}\n\ntype ResizeObserver = new (callback: (entries: readonly ResizeObserverEntry[]) => void) => {\n  observe: (target: Element) => void;\n  disconnect: () => void;\n};\n\nexport function useGridDimensions(): [React.RefObject<HTMLDivElement>, number, number] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window as typeof window & { ResizeObserver: ResizeObserver };\n\n    // don't break in jest/jsdom and browsers that don't support ResizeObserver\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(entries => {\n      const { width, height } = entries[0].contentRect;\n      setGridWidth(width);\n      setGridHeight(height);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useMemo } from 'react';\n\nimport { CalculatedColumn, Column } from '../types';\nimport { getColumnMetrics } from '../utils';\nimport { DataGridProps } from '../DataGrid';\nimport { ValueFormatter } from '../formatters';\n\ntype SharedDataGridProps<R, K extends keyof R, SR> = Pick<DataGridProps<R, K, SR>,\n  | 'defaultColumnOptions'\n  | 'rowGrouper'\n>;\n\ninterface ViewportColumnsArgs<R, K extends keyof R, SR> extends SharedDataGridProps<R, K, SR> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy?: readonly string[];\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n}\n\nexport function useViewportColumns<R, K extends keyof R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  rowGrouper\n}: ViewportColumnsArgs<R, K, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, lastFrozenColumnIndex, totalColumnWidth, totalFrozenColumnWidth, groupBy } = useMemo(() => {\n    return getColumnMetrics<R, SR>({\n      rawColumns,\n      minColumnWidth,\n      viewportWidth,\n      columnWidths,\n      defaultSortable,\n      defaultResizable,\n      defaultFormatter,\n      rawGroupBy: rowGrouper ? rawGroupBy : undefined\n    });\n  }, [columnWidths, defaultFormatter, defaultResizable, defaultSortable, minColumnWidth, rawColumns, rawGroupBy, rowGrouper, viewportWidth]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = Math.min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columns[colVisibleStartIdx];\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columns[colVisibleEndIdx];\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = Math.max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = Math.min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth]);\n\n  const viewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < colOverscanStartIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [colOverscanEndIdx, colOverscanStartIdx, columns]);\n\n  return { columns, viewportColumns, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy };\n}\n","import { useMemo } from 'react';\n\nimport { GroupRow, GroupByDictionary, Dictionary } from '../types';\nconst RENDER_BACTCH_SIZE = 8;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number;\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Dictionary<readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || !rowGrouper) return [undefined, rawRows.length];\n\n    const groupRows = (rows: readonly R[], [groupByKey, ...remainingGroupByKeys]: readonly string[], startRowIndex: number): [GroupByDictionary<R>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0\n          ? [childRows, childRows.length]\n          : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, allGroupRows] = useMemo(() => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, allGroupRows];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (rows: GroupByDictionary<R> | readonly R[], parentId: string | undefined, level: number): void => {\n      if (Array.isArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = (rows as GroupByDictionary<R>)[groupKey]; // https://github.com/microsoft/TypeScript/issues/17002\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, allGroupRows];\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const isGroupRow = <R>(row: unknown): row is GroupRow<R> => allGroupRows.has(row);\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = Math.floor(scrollTop / rowHeight);\n  const rowVisibleEndIdx = Math.min(rows.length - 1, Math.floor((scrollTop + clientHeight) / rowHeight));\n  const rowOverscanStartIdx = Math.max(0, Math.floor((rowVisibleStartIdx - overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n  const rowOverscanEndIdx = Math.min(rows.length - 1, Math.ceil((rowVisibleEndIdx + overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    isGroupRow\n  };\n}\n","import { useRef, useLayoutEffect } from 'react';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isCellSelected: boolean | undefined) {\n  const ref = useRef<T>(null);\n  useLayoutEffect(() => {\n    if (!isCellSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isCellSelected]);\n\n  return ref;\n}\n","import { Position, SelectRowEvent } from './types';\n\ninterface EventMap {\n  SelectCell: (position: Position, openEditor?: boolean) => void;\n  SelectRow: (event: SelectRowEvent) => void;\n  ToggleGroup: (id: unknown) => void;\n}\n\ntype EventName = keyof EventMap;\n\nexport default class EventBus {\n  private readonly subscribers = new Map<EventName, Set<EventMap[EventName]>>();\n\n  subscribe<T extends EventName>(type: T, handler: EventMap[T]) {\n    if (!this.subscribers.has(type)) {\n      this.subscribers.set(type, new Set());\n    }\n\n    const handlers = this.subscribers.get(type)!;\n    handlers.add(handler);\n\n    return () => {\n      handlers.delete(handler);\n    };\n  }\n\n  dispatch<T extends EventName>(type: T, ...args: Parameters<EventMap[T]>) {\n    const handlers = this.subscribers.get(type);\n    if (handlers) {\n      // handler needed a type assertion to fix type bug\n      handlers.forEach(handler => {\n        (handler as (...args: Parameters<EventMap[T]>) => void)(...args);\n      });\n    }\n  }\n}\n","import React from 'react';\nimport { HeaderCellProps } from '../HeaderCell';\nimport { SortDirection } from '../enums';\n\nconst SORT_TEXT = {\n  ASC: '\\u25B2',\n  DESC: '\\u25BC',\n  NONE: ''\n} as const;\n\ntype SharedHeaderCellProps<R, SR> = Pick<HeaderCellProps<R, SR>,\n  | 'column'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n>;\n\nexport interface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  column,\n  onSort,\n  sortColumn,\n  sortDirection,\n  children\n}: Props<R, SR>) {\n  sortDirection = sortColumn === column.key && sortDirection || 'NONE';\n  function onClick() {\n    if (!onSort) return;\n    const { sortDescendingFirst } = column;\n    let direction: SortDirection;\n    switch (sortDirection) {\n      case 'ASC':\n        direction = sortDescendingFirst ? 'NONE' : 'DESC';\n        break;\n      case 'DESC':\n        direction = sortDescendingFirst ? 'ASC' : 'NONE';\n        break;\n      default:\n        direction = sortDescendingFirst ? 'DESC' : 'ASC';\n        break;\n    }\n    onSort(column.key, direction);\n  }\n\n  return (\n    <span className=\"rdg-header-sort-cell\" onClick={onClick}>\n      <span className=\"rdg-header-sort-name\">{children}</span>\n      <span>{SORT_TEXT[sortDirection]}</span>\n    </span>\n  );\n}\n","import React, { cloneElement } from 'react';\nimport { CalculatedColumn } from '../types';\n\nexport interface ResizableHeaderCellProps<R, SR> {\n  children: React.ReactElement<React.ComponentProps<'div'>>;\n  column: CalculatedColumn<R, SR>;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nexport default function ResizableHeaderCell<R, SR>({\n  children,\n  column,\n  onResize\n}: ResizableHeaderCellProps<R, SR>) {\n  function onMouseDown(event: React.MouseEvent) {\n    if (event.button !== 0) {\n      return;\n    }\n\n    const { currentTarget } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    const onMouseMove = (event: MouseEvent) => {\n      handleResize(event.clientX + offset, currentTarget);\n    };\n\n    const onMouseUp = () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n\n    event.preventDefault();\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('mouseup', onMouseUp);\n  }\n\n  function onTouchStart(event: React.TouchEvent) {\n    const touch = event.changedTouches[0];\n    const { identifier } = touch;\n    const { currentTarget } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - touch.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    function getTouch(event: TouchEvent) {\n      for (const touch of event.changedTouches) {\n        if (touch.identifier === identifier) return touch;\n      }\n      return null;\n    }\n\n    const onTouchMove = (event: TouchEvent) => {\n      const touch = getTouch(event);\n      if (touch) {\n        handleResize(touch.clientX + offset, currentTarget);\n      }\n    };\n\n    const onTouchEnd = (event: TouchEvent) => {\n      const touch = getTouch(event);\n      if (!touch) return;\n      window.removeEventListener('touchmove', onTouchMove);\n      window.removeEventListener('touchend', onTouchEnd);\n    };\n\n    window.addEventListener('touchmove', onTouchMove);\n    window.addEventListener('touchend', onTouchEnd);\n  }\n\n  function handleResize(x: number, target: Element) {\n    const width = x - target.getBoundingClientRect().left;\n    if (width > 0) {\n      onResize(column, width);\n    }\n  }\n\n  return cloneElement(children, {\n    onMouseDown,\n    onTouchStart,\n    children: (\n      <>\n        {children.props.children}\n        <div className=\"rdg-header-cell-resizer\" />\n      </>\n    )\n  });\n}\n","import React, { createElement } from 'react';\nimport clsx from 'clsx';\n\nimport { CalculatedColumn } from './types';\nimport { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport ResizableHeaderCell from './headerCells/ResizableHeaderCell';\nimport { SortDirection } from './enums';\n\nfunction getAriaSort(sortDirection?: SortDirection) {\n  switch (sortDirection) {\n    case 'ASC':\n      return 'ascending';\n    case 'DESC':\n      return 'descending';\n    default:\n      return 'none';\n  }\n}\n\ntype SharedHeaderRowProps<R, SR> = Pick<HeaderRowProps<R, never, SR>,\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'allRowsSelected'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderCellProps<R, SR>) {\n  function getCell() {\n    if (!column.headerRenderer) return column.name;\n\n    return createElement(column.headerRenderer, { column, allRowsSelected, onAllRowsSelectionChange });\n  }\n\n  let cell = getCell();\n\n  if (column.sortable) {\n    cell = (\n      <SortableHeaderCell\n        column={column}\n        onSort={onSort}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n      >\n        {cell}\n      </SortableHeaderCell>\n    );\n  }\n\n  const className = clsx('rdg-cell', column.headerCellClass, {\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.isLastFrozenColumn\n  });\n  const style: React.CSSProperties = {\n    width: column.width,\n    left: column.left\n  };\n\n  cell = (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-sort={sortColumn === column.key ? getAriaSort(sortDirection) : undefined}\n      className={className}\n      style={style}\n    >\n      {cell}\n    </div>\n  );\n\n  if (column.resizable) {\n    cell = (\n      <ResizableHeaderCell\n        column={column}\n        onResize={onResize}\n      >\n        {cell as React.ReactElement<React.ComponentProps<'div'>>}\n      </ResizableHeaderCell>\n    );\n  }\n\n  return cell;\n}\n","import React, { useCallback, memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport { CalculatedColumn } from './types';\nimport { assertIsValidKey } from './utils';\nimport { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, K extends keyof R, SR> = Pick<DataGridProps<R, K, SR>,\n  | 'rows'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKey'\n>;\n\nexport interface HeaderRowProps<R, K extends keyof R, SR> extends SharedDataGridProps<R, K, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nfunction HeaderRow<R, K extends keyof R, SR>({\n  columns,\n  rows,\n  rowKey,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderRowProps<R, K, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKey(rowKey);\n\n    const newSelectedRows = new Set<R[K]>();\n    if (checked) {\n      for (const row of rows) {\n        newSelectedRows.add(row[rowKey]);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKey]);\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className=\"rdg-header-row\"\n    >\n      {columns.map(column => {\n        return (\n          <HeaderCell<R, SR>\n            key={column.key}\n            column={column}\n            onResize={onColumnResize}\n            allRowsSelected={allRowsSelected}\n            onAllRowsSelectionChange={handleAllRowsSelectionChange}\n            onSort={onSort}\n            sortColumn={sortColumn}\n            sortDirection={sortDirection}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, K extends keyof R, SR>(props: HeaderRowProps<R, K, SR>) => JSX.Element;\n","import React, { createElement, memo } from 'react';\nimport clsx from 'clsx';\n\nimport { CalculatedColumn, Filters } from './types';\nimport { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, never, SR>,\n  | 'filters'\n  | 'onFiltersChange'\n>;\n\nexport interface FilterRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n}\n\nfunction FilterRow<R, SR>({\n  columns,\n  filters,\n  onFiltersChange\n}: FilterRowProps<R, SR>) {\n  function onChange(key: string, value: unknown) {\n    const newFilters: Filters = { ...filters };\n    newFilters[key] = value;\n    onFiltersChange?.(newFilters);\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={2}\n      className=\"rdg-filter-row\"\n    >\n      {columns.map(column => {\n        const { key } = column;\n\n        const className = clsx('rdg-cell', {\n          'rdg-cell-frozen': column.frozen,\n          'rdg-cell-frozen-last': column.isLastFrozenColumn\n        });\n        const style: React.CSSProperties = {\n          width: column.width,\n          left: column.left\n        };\n\n        return (\n          <div\n            key={key}\n            style={style}\n            className={className}\n          >\n            {column.filterRenderer && createElement(column.filterRenderer, {\n              column,\n              value: filters?.[column.key],\n              onChange: value => onChange(key, value)\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(FilterRow) as <R, SR>(props: FilterRowProps<R, SR>) => JSX.Element;\n","import React, { forwardRef, memo, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { CellRendererProps } from './types';\nimport { wrapEvent } from './utils';\nimport { useCombinedRefs } from './hooks';\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  isRowSelected,\n  row,\n  rowIdx,\n  eventBus,\n  dragHandleProps,\n  onRowClick,\n  onFocus,\n  onKeyDown,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  ...props\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const cellRef = useRef<HTMLDivElement>(null);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn,\n      'rdg-cell-selected': isCellSelected,\n      'rdg-cell-copied': isCopied,\n      'rdg-cell-dragged-over': isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function selectCell(openEditor?: boolean) {\n    eventBus.dispatch('SelectCell', { idx: column.idx, rowIdx }, openEditor);\n  }\n\n  function handleClick() {\n    selectCell(column.editorOptions?.editOnClick);\n    onRowClick?.(rowIdx, row, column);\n  }\n\n  function handleContextMenu() {\n    selectCell();\n  }\n\n  function handleDoubleClick() {\n    selectCell(true);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    eventBus.dispatch('SelectRow', { rowIdx, checked, isShiftClick });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      ref={useCombinedRefs(cellRef, ref)}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      onFocus={onFocus}\n      onKeyDown={onKeyDown}\n      onClick={wrapEvent(handleClick, onClick)}\n      onDoubleClick={wrapEvent(handleDoubleClick, onDoubleClick)}\n      onContextMenu={wrapEvent(handleContextMenu, onContextMenu)}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            rowIdx={rowIdx}\n            row={row}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            onRowSelectionChange={onRowSelectionChange}\n          />\n          {dragHandleProps && (\n            <div className=\"rdg-cell-drag-handle\" {...dragHandleProps} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import React from 'react';\nimport { Editor, EditorProps } from '../types';\n\ntype Props = Pick<EditorProps<string>, 'value' | 'column' | 'onCommit'>;\n\nexport default class SimpleTextEditor extends React.Component<Props> implements Editor<{ [key: string]: string }> {\n  private readonly input = React.createRef<HTMLInputElement>();\n\n  getInputNode() {\n    return this.input.current;\n  }\n\n  getValue() {\n    return {\n      [this.props.column.key]: this.input.current!.value\n    };\n  }\n\n  render() {\n    return (\n      <input\n        className=\"rdg-text-editor\"\n        ref={this.input}\n        defaultValue={this.props.value}\n        onBlur={this.props.onCommit}\n      />\n    );\n  }\n}\n","import React, { useState, useLayoutEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface Props {\n  children: React.ReactNode;\n  target: Element;\n}\n\nexport default function EditorPortal({ target, children }: Props) {\n  // Keep track of when the modal element is added to the DOM\n  const [isMounted, setIsMounted] = useState(false);\n\n  useLayoutEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  // Don't render the portal until the component has mounted,\n  // So the portal can safely access the DOM.\n  if (!isMounted) {\n    return null;\n  }\n\n  return ReactDOM.createPortal(children, target);\n}\n","import React, { KeyboardEvent, useRef, useState, useLayoutEffect, useCallback, useEffect } from 'react';\nimport clsx from 'clsx';\n\nimport { CalculatedColumn, Editor, SharedEditorContainerProps } from '../types';\nimport { useClickOutside } from '../hooks';\nimport SimpleTextEditor from './SimpleTextEditor';\nimport { preventDefault } from '../utils';\n\nexport interface EditorContainerProps<R, SR> extends SharedEditorContainerProps {\n  rowIdx: number;\n  row: R;\n  column: CalculatedColumn<R, SR>;\n  top: number;\n  left: number;\n}\n\nexport default function EditorContainer<R, SR>({\n  rowIdx,\n  column,\n  row,\n  rowHeight,\n  left,\n  top,\n  onCommit,\n  onCommitCancel,\n  scrollLeft,\n  scrollTop,\n  firstEditorKeyPress: key\n}: EditorContainerProps<R, SR>) {\n  const editorRef = useRef<Editor>(null);\n  const changeCommitted = useRef(false);\n  const changeCanceled = useRef(false);\n  const [isValid, setValid] = useState(true);\n  const prevScrollLeft = useRef(scrollLeft);\n  const prevScrollTop = useRef(scrollTop);\n  const isUnmounting = useRef(false);\n  const onClickCapture = useClickOutside(commit);\n\n  const getInputNode = useCallback(() => editorRef.current?.getInputNode(), []);\n\n  const commitCancel = useCallback(() => {\n    changeCanceled.current = true;\n    onCommitCancel();\n  }, [onCommitCancel]);\n\n  useLayoutEffect(() => {\n    const inputNode = getInputNode();\n\n    if (inputNode instanceof HTMLElement) {\n      inputNode.focus();\n    }\n    if (inputNode instanceof HTMLInputElement) {\n      inputNode.select();\n    }\n  }, [getInputNode]);\n\n  // close editor when scrolling\n  useEffect(() => {\n    if (scrollLeft !== prevScrollLeft.current || scrollTop !== prevScrollTop.current) {\n      commitCancel();\n    }\n  }, [commitCancel, scrollLeft, scrollTop]);\n\n  useEffect(() => () => {\n    isUnmounting.current = true;\n  }, []);\n\n  // commit changes when editor is closed\n  useEffect(() => () => {\n    if (isUnmounting.current && !changeCommitted.current && !changeCanceled.current) {\n      commit();\n    }\n  });\n\n  function getInitialValue() {\n    const value = row[column.key as keyof R];\n    if (key === 'Delete' || key === 'Backspace') {\n      return '';\n    }\n    if (key === 'Enter' || key === 'F2') {\n      return value;\n    }\n\n    return key ?? value;\n  }\n\n  function isCaretAtBeginningOfInput(): boolean {\n    const inputNode = getInputNode();\n    return inputNode instanceof HTMLInputElement\n      && inputNode.selectionEnd === 0;\n  }\n\n  function isCaretAtEndOfInput(): boolean {\n    const inputNode = getInputNode();\n    return inputNode instanceof HTMLInputElement\n      && inputNode.selectionStart === inputNode.value.length;\n  }\n\n  function editorHasResults(): boolean {\n    return editorRef.current?.hasResults?.() ?? false;\n  }\n\n  function editorIsSelectOpen(): boolean {\n    return editorRef.current?.isSelectOpen?.() ?? false;\n  }\n\n  function isNewValueValid(value: unknown): boolean {\n    const isValid = editorRef.current?.validate?.(value);\n    if (typeof isValid === 'boolean') {\n      setValid(isValid);\n      return isValid;\n    }\n    return true;\n  }\n\n  function preventDefaultNavigation(key: string): boolean {\n    return (key === 'ArrowLeft' && !isCaretAtBeginningOfInput())\n      || (key === 'ArrowRight' && !isCaretAtEndOfInput())\n      || (key === 'Escape' && editorIsSelectOpen())\n      || (['ArrowUp', 'ArrowDown'].includes(key) && editorHasResults());\n  }\n\n  function commit(): void {\n    if (!editorRef.current) return;\n    const updated = editorRef.current.getValue();\n    if (isNewValueValid(updated)) {\n      changeCommitted.current = true;\n      const cellKey = column.key;\n      onCommit({ cellKey, rowIdx, updated });\n    }\n  }\n\n  function onKeyDown(e: KeyboardEvent) {\n    if (preventDefaultNavigation(e.key)) {\n      e.stopPropagation();\n    } else if (['Enter', 'Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n      commit();\n    } else if (e.key === 'Escape') {\n      commitCancel();\n    }\n  }\n\n  function createEditor() {\n    // return custom column editor or SimpleEditor if none specified\n    if (column.editor) {\n      return (\n        <column.editor\n          ref={editorRef}\n          column={column}\n          value={getInitialValue() as R[keyof R & string] & R[keyof R & number] & R[keyof R & symbol]}\n          row={row}\n          height={rowHeight}\n          onCommit={commit}\n          onCommitCancel={commitCancel}\n          onOverrideKeyDown={onKeyDown}\n        />\n      );\n    }\n\n    return (\n      <SimpleTextEditor\n        ref={editorRef as unknown as React.RefObject<SimpleTextEditor>}\n        column={column}\n        value={getInitialValue() as string}\n        onCommit={commit}\n      />\n    );\n  }\n\n  const className = clsx('rdg-editor-container', {\n    'rdg-editor-invalid': !isValid\n  });\n\n  return (\n    <div\n      className={className}\n      style={{ height: rowHeight, width: column.width, left, top }}\n      onClickCapture={onClickCapture}\n      onKeyDown={onKeyDown}\n      onContextMenu={preventDefault}\n    >\n      {createEditor()}\n    </div>\n  );\n}\n","import React from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { Editor2Props } from '../types';\nimport { useClickOutside } from '../hooks';\n\nexport default function Editor2Container<R, SR>({\n  row,\n  column,\n  onRowChange,\n  editorPortalTarget,\n  ...props\n}: Editor2Props<R, SR>) {\n  const onClickCapture = useClickOutside(() => onRowChange(row, true));\n  if (column.editor2 === undefined) return null;\n\n  const editor = (\n    <div className=\"rdg-editor-container2\" onClickCapture={onClickCapture}>\n      <column.editor2\n        row={row}\n        column={column}\n        onRowChange={onRowChange}\n        editorPortalTarget={editorPortalTarget}\n        {...props}\n      />\n    </div>\n  );\n\n  if (column.editorOptions?.createPortal) {\n    return createPortal(editor, editorPortalTarget);\n  }\n\n  return editor;\n}\n","import React, { forwardRef, useState, useCallback } from 'react';\nimport clsx from 'clsx';\n\nimport { EditorContainer, EditorContainer2, EditorPortal } from './editors';\nimport { CellRendererProps, SharedEditorContainerProps, SharedEditor2Props } from './types';\nimport { useCombinedRefs } from './hooks';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>,\n| 'rowIdx'\n| 'row'\n| 'column'\n>;\n\ninterface EditCellRendererProps<R, SR> extends SharedCellRendererProps<R, SR>, Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  editorPortalTarget: Element;\n  editorContainerProps: SharedEditorContainerProps;\n  editor2Props: SharedEditor2Props<R>;\n}\n\nfunction EditCell<R, SR>({\n  className,\n  column,\n  row,\n  rowIdx,\n  editorPortalTarget,\n  editorContainerProps,\n  editor2Props,\n  onKeyDown,\n  ...props\n}: EditCellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const [dimensions, setDimensions] = useState<{ left: number; top: number } | null>(null);\n\n  const cellRef = useCallback(node => {\n    if (node !== null) {\n      const { left, top } = node.getBoundingClientRect();\n      setDimensions({ left, top });\n    }\n  }, []);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    'rdg-cell-selected',\n    'rdg-cell-editing',\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function getCellContent() {\n    if (dimensions === null) return;\n    const { scrollTop: docTop, scrollLeft: docLeft } = document.scrollingElement ?? document.documentElement;\n    const { left, top } = dimensions;\n    const gridLeft = left + docLeft;\n    const gridTop = top + docTop;\n\n    if (column.editor2 !== undefined) {\n      return (\n        <EditorContainer2\n          {...editor2Props}\n          editorPortalTarget={editorPortalTarget}\n          rowIdx={rowIdx}\n          column={column}\n          left={gridLeft}\n          top={gridTop}\n        />\n      );\n    }\n\n    const editor = (\n      <EditorContainer<R, SR>\n        {...editorContainerProps}\n        rowIdx={rowIdx}\n        row={row}\n        column={column}\n        left={gridLeft}\n        top={gridTop}\n      />\n    );\n\n    if (column.editorOptions?.createPortal !== false) {\n      return (\n        <EditorPortal target={editorPortalTarget}>\n          {editor}\n        </EditorPortal>\n      );\n    }\n\n    return editor;\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected\n      ref={useCombinedRefs(cellRef, ref)}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      onKeyDown={onKeyDown}\n      {...props}\n    >\n      {getCellContent()}\n    </div>\n  );\n}\n\nexport default forwardRef(EditCell) as <R, SR = unknown>(props: EditCellRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import React, { memo, forwardRef } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport EditCell from './EditCell';\nimport { RowRendererProps, SelectedCellProps } from './types';\nimport { wrapEvent } from './utils';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  eventBus,\n  rowIdx,\n  isRowSelected,\n  copiedCellIdx,\n  draggedOverCellIdx,\n  row,\n  viewportColumns,\n  selectedCellProps,\n  onRowClick,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  top,\n  'aria-rowindex': ariaRowIndex,\n  'aria-selected': ariaSelected,\n  ...props\n}: RowRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  function handleDragEnter() {\n    setDraggedOverRowIdx?.(rowIdx);\n  }\n\n  className = clsx(\n    'rdg-row',\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n      'rdg-row-selected': isRowSelected,\n      'rdg-group-row-selected': selectedCellProps?.idx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      aria-selected={ariaSelected}\n      ref={ref}\n      className={className}\n      onMouseEnter={wrapEvent(handleDragEnter, onMouseEnter)}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => {\n        const isCellSelected = selectedCellProps?.idx === column.idx;\n        if (selectedCellProps?.mode === 'EDIT' && isCellSelected) {\n          return (\n            <EditCell<R, SR>\n              key={column.key}\n              rowIdx={rowIdx}\n              column={column}\n              row={row}\n              onKeyDown={selectedCellProps.onKeyDown}\n              editorPortalTarget={selectedCellProps.editorPortalTarget}\n              editorContainerProps={selectedCellProps.editorContainerProps}\n              editor2Props={selectedCellProps.editor2Props}\n            />\n          );\n        }\n\n        return (\n          <CellRenderer\n            key={column.key}\n            rowIdx={rowIdx}\n            column={column}\n            row={row}\n            isCopied={copiedCellIdx === column.idx}\n            isDraggedOver={draggedOverCellIdx === column.idx}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            eventBus={eventBus}\n            dragHandleProps={isCellSelected ? (selectedCellProps as SelectedCellProps).dragHandleProps : undefined}\n            onFocus={isCellSelected ? (selectedCellProps as SelectedCellProps).onFocus : undefined}\n            onKeyDown={isCellSelected ? selectedCellProps!.onKeyDown : undefined}\n            onRowClick={onRowClick}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR = unknown>(props: RowRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import React, { memo } from 'react';\nimport clsx from 'clsx';\nimport { GroupRowRendererProps, CalculatedColumn } from './types';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<GroupRowRendererProps<R, SR>,\n  | 'id'\n  | 'rowIdx'\n  | 'groupKey'\n  | 'childRows'\n  | 'isExpanded'\n  | 'isRowSelected'\n  | 'eventBus'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  rowIdx,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  isRowSelected,\n  eventBus,\n  column,\n  groupColumnIndex\n}: GroupCellProps<R, SR>) {\n  function toggleGroup() {\n    eventBus.dispatch('ToggleGroup', id);\n  }\n\n  function onRowSelectionChange(checked: boolean) {\n    eventBus.dispatch('SelectRow', { rowIdx, checked, isShiftClick: false });\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      key={column.key}\n      className={clsx('rdg-cell', {\n        'rdg-cell-frozen': column.frozen,\n        'rdg-cell-frozen-last': column.isLastFrozenColumn,\n        'rdg-cell-selected': isCellSelected\n      })}\n      style={{\n        width: column.width,\n        left: column.left,\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n    >\n      {column.groupFormatter && (!column.rowGroup || groupColumnIndex === column.idx) && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          isRowSelected={isRowSelected}\n          onRowSelectionChange={onRowSelectionChange}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import React, { memo } from 'react';\nimport clsx from 'clsx';\nimport { GroupRowRendererProps } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  top,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  eventBus,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function selectGroup() {\n    eventBus.dispatch('SelectCell', { rowIdx, idx: -1 });\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-level={level}\n      aria-expanded={isExpanded}\n      className={clsx(\n        'rdg-row',\n        'rdg-group-row',\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n          'rdg-row-selected': isRowSelected,\n          'rdg-group-row-selected': selectedCellIdx === -1 // Select row if there is no selected cell\n        })}\n      onClick={selectGroup}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => (\n        <GroupCell<R, SR>\n          key={column.key}\n          id={id}\n          rowIdx={rowIdx}\n          groupKey={groupKey}\n          childRows={childRows}\n          isExpanded={isExpanded}\n          isRowSelected={isRowSelected}\n          isCellSelected={selectedCellIdx === column.idx}\n          eventBus={eventBus}\n          column={column}\n          groupColumnIndex={idx}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport { CellRendererProps } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'column'>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  row\n}: SummaryCellProps<R, SR>) {\n  const { summaryFormatter: SummaryFormatter, width, left, summaryCellClass } = column;\n  const className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      className={className}\n      style={{ width, left }}\n    >\n      {SummaryFormatter && <SummaryFormatter column={column} row={row} />}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import React, { memo } from 'react';\n\nimport SummaryCell from './SummaryCell';\nimport { RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>,\n  | 'viewportColumns'\n  | 'rowIdx'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n}\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={`rdg-row rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'} rdg-summary-row`}\n      style={{ bottom }}\n    >\n      {viewportColumns.map(column => (\n        <SummaryCell<R, SR>\n          key={column.key}\n          column={column}\n          row={row}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import React, {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useEffect,\n  useImperativeHandle,\n  useCallback,\n  createElement\n} from 'react';\nimport clsx from 'clsx';\n\nimport { useGridDimensions, useViewportColumns, useViewportRows } from './hooks';\nimport EventBus from './EventBus';\nimport HeaderRow from './HeaderRow';\nimport FilterRow from './FilterRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport {\n  assertIsValidKey,\n  getColumnScrollPosition,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput\n} from './utils';\n\nimport {\n  CalculatedColumn,\n  CheckCellIsEditableEvent,\n  Column,\n  Filters,\n  Position,\n  RowRendererProps,\n  RowsUpdateEvent,\n  SelectRowEvent,\n  CommitEvent,\n  SelectedCellProps,\n  EditCellProps,\n  Dictionary\n} from './types';\nimport { CellNavigationMode, SortDirection } from './enums';\n\ninterface SelectCellState extends Position {\n  mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  mode: 'EDIT';\n  row: R;\n  originalRow: R;\n  key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<Column<R, SR>,\n  | 'formatter'\n  | 'minWidth'\n  | 'resizable'\n  | 'sortable'\n>;\n\nexport interface DataGridHandle {\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, openEditor?: boolean) => void;\n}\n\ntype SharedDivProps = Pick<React.HTMLAttributes<HTMLDivElement>,\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, K extends keyof R, SR = unknown> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[];\n  /** The primary key property of each row */\n  rowKey?: K;\n  /**\n   * Callback called whenever row data is updated\n   * When editing is enabled, this callback will be called for the following scenarios\n   * 1. Using the supplied editor of the column. The default editor is the SimpleTextEditor.\n   * 2. Copy/pasting the value from one cell to another <kbd>CTRL</kbd>+<kbd>C</kbd>, <kbd>CTRL</kbd>+<kbd>V</kbd>\n   * 3. Update multiple cells by dragging the fill handle of a cell up or down to a destination cell.\n   * 4. Update all cells under a given cell by double clicking the cell's fill handle.\n   */\n  onRowsUpdate?: <E extends RowsUpdateEvent>(event: E) => void;\n  onRowsChange?: (rows: R[]) => void;\n\n  /**\n   * Dimensions props\n   */\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<R[K]>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: (selectedRows: Set<R[K]>) => void;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: string;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: SortDirection;\n  /** Function called whenever grid is sorted*/\n  onSort?: (columnKey: string, direction: SortDirection) => void;\n  filters?: Filters;\n  onFiltersChange?: (filters: Filters) => void;\n  defaultColumnOptions?: DefaultColumnOptions<R, SR>;\n  groupBy?: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Dictionary<readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange?: (expandedGroupIds: Set<unknown>) => void;\n\n  /**\n   * Custom renderers\n   */\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>>;\n  emptyRowsRenderer?: React.ComponentType;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: (rowIdx: number, row: R, column: CalculatedColumn<R, SR>) => void;\n  /** Called when the grid is scrolled */\n  onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;\n  /** Called when a column is resized */\n  onColumnResize?: (idx: number, width: number) => void;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: (position: Position) => void;\n  /** called before cell is set active, returns a boolean to determine whether cell is editable */\n  onCheckCellIsEditable?: (event: CheckCellIsEditableEvent<R, SR>) => boolean;\n\n  /**\n   * Toggles and modes\n   */\n  /** Toggles whether filters row is displayed or not */\n  enableFilters?: boolean;\n  enableCellCopyPaste?: boolean;\n  enableCellDragAndDrop?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n  rowClass?: (row: R) => string | undefined;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n*/\nfunction DataGrid<R, K extends keyof R, SR>({\n  // Grid and data Props\n  columns: rawColumns,\n  rows: rawRows,\n  summaryRows,\n  rowKey,\n  onRowsUpdate,\n  onRowsChange,\n  // Dimensions props\n  rowHeight = 35,\n  headerRowHeight = rowHeight,\n  headerFiltersHeight = 45,\n  // Feature props\n  selectedRows,\n  onSelectedRowsChange,\n  sortColumn,\n  sortDirection,\n  onSort,\n  filters,\n  onFiltersChange,\n  defaultColumnOptions,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  // Custom renderers\n  rowRenderer: RowRenderer = Row,\n  emptyRowsRenderer,\n  // Event props\n  onRowClick,\n  onScroll,\n  onColumnResize,\n  onSelectedCellChange,\n  onCheckCellIsEditable,\n  // Toggles and modes\n  enableFilters = false,\n  enableCellCopyPaste = false,\n  enableCellDragAndDrop = false,\n  cellNavigationMode = 'NONE',\n  // Miscellaneous\n  editorPortalTarget = document.body,\n  className,\n  style,\n  rowClass,\n  // ARIA\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy\n}: DataGridProps<R, K, SR>, ref: React.Ref<DataGridHandle>) {\n  /**\n   * states\n   */\n  const [eventBus] = useState(() => new EventBus());\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n  const [copiedPosition, setCopiedPosition] = useState<Position & { value: unknown } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const isCellFocusable = useRef(false);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = enableFilters ? 2 : 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const totalHeaderHeight = headerRowHeight + (enableFilters ? headerFiltersHeight : 0);\n  const clientHeight = gridHeight - totalHeaderHeight - summaryRowsCount * rowHeight;\n  const isSelectable = selectedRows !== undefined && onSelectedRowsChange !== undefined;\n\n  const { columns, viewportColumns, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy } = useViewportColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy,\n    rowGrouper\n  });\n\n  const { rowOverscanStartIdx, rowOverscanEndIdx, rows, rowsCount, isGroupRow } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds\n  });\n\n  const hasGroups = groupBy.length > 0 && rowGrouper;\n  const minColIdx = hasGroups ? -1 : 0;\n\n  if (hasGroups) {\n    // Cell drag is not supported on a treegrid\n    enableCellDragAndDrop = false;\n  }\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (selectedPosition === prevSelectedPosition.current || selectedPosition.mode === 'EDIT' || !isCellWithinBounds(selectedPosition)) return;\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (isCellFocusable.current) {\n      isCellFocusable.current = false;\n      return;\n    }\n    focusSinkRef.current!.focus({ preventScroll: true });\n  });\n\n  useEffect(() => {\n    if (!onSelectedRowsChange) return;\n\n    const handleRowSelectionChange = ({ rowIdx, checked, isShiftClick }: SelectRowEvent) => {\n      assertIsValidKey(rowKey);\n      const newSelectedRows = new Set(selectedRows);\n      const row = rows[rowIdx];\n      if (isGroupRow(row)) {\n        for (const childRow of row.childRows) {\n          if (checked) {\n            newSelectedRows.add(childRow[rowKey]);\n          } else {\n            newSelectedRows.delete(childRow[rowKey]);\n          }\n        }\n        onSelectedRowsChange(newSelectedRows);\n        return;\n      }\n\n      const rowId = row[rowKey];\n      if (checked) {\n        newSelectedRows.add(rowId);\n        const previousRowIdx = lastSelectedRowIdx.current;\n        lastSelectedRowIdx.current = rowIdx;\n        if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n          const step = Math.sign(rowIdx - previousRowIdx);\n          for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n            const row = rows[i];\n            if (isGroupRow(row)) continue;\n            newSelectedRows.add(row[rowKey]);\n          }\n        }\n      } else {\n        newSelectedRows.delete(rowId);\n        lastSelectedRowIdx.current = -1;\n      }\n\n      onSelectedRowsChange(newSelectedRows);\n    };\n\n    return eventBus.subscribe('SelectRow', handleRowSelectionChange);\n  }, [eventBus, isGroupRow, onSelectedRowsChange, rowKey, rows, selectedRows]);\n\n  useEffect(() => {\n    return eventBus.subscribe('SelectCell', selectCell);\n  });\n\n  useEffect(() => {\n    if (!onExpandedGroupIdsChange) return;\n\n    const toggleGroup = (expandedGroupId: unknown) => {\n      const newExpandedGroupIds = new Set(expandedGroupIds);\n      if (newExpandedGroupIds.has(expandedGroupId)) {\n        newExpandedGroupIds.delete(expandedGroupId);\n      } else {\n        newExpandedGroupIds.add(expandedGroupId);\n      }\n      onExpandedGroupIdsChange(newExpandedGroupIds);\n    };\n\n    return eventBus.subscribe('ToggleGroup', toggleGroup);\n  }, [eventBus, expandedGroupIds, onExpandedGroupIdsChange]);\n\n  useImperativeHandle(ref, () => ({\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTop = rowIdx * rowHeight;\n    },\n    selectCell\n  }));\n\n  /**\n   * event handlers\n   */\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key } = event;\n    const row = rows[selectedPosition.rowIdx];\n\n    if (\n      enableCellCopyPaste\n      && isCtrlKeyHeldDown(event)\n      && isCellWithinBounds(selectedPosition)\n      && !isGroupRow(row)\n      && selectedPosition.idx !== -1\n    ) {\n      // key may be uppercase `C` or `V`\n      const lowerCaseKey = key.toLowerCase();\n      if (lowerCaseKey === 'c') {\n        handleCopy();\n        return;\n      }\n      if (lowerCaseKey === 'v') {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isCellWithinBounds(selectedPosition)\n      && isGroupRow(row)\n      && selectedPosition.idx === -1\n      && (\n        // Collapse the current group row if it is focused and is in expanded state\n        (key === 'ArrowLeft' && row.isExpanded)\n        // Expand the current group row if it is focused and is in collapsed state\n        || (key === 'ArrowRight' && !row.isExpanded)\n      )) {\n      event.preventDefault(); // Prevents scrolling\n      eventBus.dispatch('ToggleGroup', row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedPosition(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isCellFocusable.current = true;\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  const handleColumnResize = useCallback((column: CalculatedColumn<R, SR>, width: number) => {\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, width);\n    setColumnWidths(newColumnWidths);\n\n    onColumnResize?.(column.idx, width);\n  }, [columnWidths, onColumnResize]);\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function handleCommit({ cellKey, rowIdx, updated }: CommitEvent) {\n    rowIdx = getRawRowIdx(rowIdx);\n    onRowsUpdate?.({\n      cellKey,\n      fromRow: rowIdx,\n      toRow: rowIdx,\n      updated,\n      action: 'CELL_UPDATE'\n    });\n\n    closeEditor();\n  }\n\n  function commitEditor2Changes() {\n    if (\n      columns[selectedPosition.idx]?.editor2 === undefined\n      || selectedPosition.mode === 'SELECT'\n      || selectedPosition.row === selectedPosition.originalRow) {\n      return;\n    }\n\n    const updatedRows = [...rawRows];\n    updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = selectedPosition.row;\n    onRowsChange?.(updatedRows);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    const value = rawRows[rawRowIdx][columns[idx].key as keyof R];\n    setCopiedPosition({ idx, rowIdx, value });\n  }\n\n  function handlePaste() {\n    if (\n      copiedPosition === null\n      || !isCellEditable(selectedPosition)\n      || (copiedPosition.idx === selectedPosition.idx && copiedPosition.rowIdx === selectedPosition.rowIdx)\n    ) {\n      return;\n    }\n\n    const fromRow = getRawRowIdx(copiedPosition.rowIdx);\n    const fromCellKey = columns[copiedPosition.idx].key;\n    const toRow = getRawRowIdx(selectedPosition.rowIdx);\n    const cellKey = columns[selectedPosition.idx].key;\n\n    onRowsUpdate?.({\n      cellKey,\n      fromRow,\n      toRow,\n      updated: { [cellKey]: copiedPosition.value } as unknown as never,\n      action: 'COPY_PASTE',\n      fromCellKey\n    });\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!isCellWithinBounds(selectedPosition)) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key } = event;\n    const column = columns[selectedPosition.idx];\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditor2Changes();\n        closeEditor();\n      }\n      return;\n    }\n\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleDragEnd() {\n    if (latestDraggedOverRowIdx.current === undefined) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const cellKey = column.key;\n    const value = rawRows[rowIdx][cellKey as keyof R];\n\n    onRowsUpdate?.({\n      cellKey,\n      fromRow: rowIdx,\n      toRow: latestDraggedOverRowIdx.current,\n      updated: { [cellKey]: value } as unknown as never,\n      action: 'CELL_DRAG'\n    });\n\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n\n    const column = columns[selectedPosition.idx];\n    const cellKey = column.key;\n    const value = rawRows[selectedPosition.rowIdx][cellKey as keyof R];\n\n    onRowsUpdate?.({\n      cellKey,\n      fromRow: selectedPosition.rowIdx,\n      toRow: rawRows.length - 1,\n      updated: { [cellKey]: value } as unknown as never,\n      action: 'COLUMN_FILL'\n    });\n  }\n\n  function handleRowChange(row: Readonly<R>, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      const updatedRows = [...rawRows];\n      updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = row;\n      onRowsChange?.(updatedRows);\n      closeEditor();\n    } else {\n      setSelectedPosition(position => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditor2Changes();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= 0 && rowIdx < rows.length && idx >= minColIdx && idx < columns.length;\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return isCellWithinBounds(position)\n      && isSelectedCellEditable<R, SR>({ columns, rows, selectedPosition: position, onCheckCellIsEditable, isGroupRow });\n  }\n\n  function selectCell(position: Position, enableEditor = false): void {\n    if (!isCellWithinBounds(position)) return;\n    commitEditor2Changes();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', key: null, row, originalRow: row });\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      const { clientWidth } = current;\n      const { left, width } = columns[idx];\n      const isCellAtLeftBoundary = left < scrollLeft + width + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = left + width > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary || isCellAtRightBoundary) {\n        const newScrollLeft = getColumnScrollPosition(columns, idx, scrollLeft, clientWidth);\n        current.scrollLeft = scrollLeft + newScrollLeft;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      if (rowIdx * rowHeight < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowIdx * rowHeight;\n      } else if ((rowIdx + 1) * rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = isCellWithinBounds(selectedPosition) && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft'\n      && isRowSelected\n      && isGroupRow(row)\n      && !row.isExpanded\n      && row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        if (selectedPosition.idx === -1 && selectedPosition.rowIdx === -1) {\n          return shiftKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: 0, rowIdx: 0 };\n        }\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return ctrlKey ? { idx: 0, rowIdx: 0 } : { idx: 0, rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return ctrlKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: columns.length - 1, rowIdx };\n      case 'PageUp':\n        return { idx, rowIdx: rowIdx - Math.floor(clientHeight / rowHeight) };\n      case 'PageDown':\n        return { idx, rowIdx: rowIdx + Math.floor(clientHeight / rowHeight) };\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    let nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (canExitGrid({ shiftKey, cellNavigationMode, columns, rowsCount: rows.length, selectedPosition })) {\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE'\n        ? 'CHANGE_ROW'\n        : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    nextPosition = getNextSelectedCellPosition<R, SR>({\n      columns,\n      rowsCount: rows.length,\n      cellNavigationMode: mode,\n      nextPosition\n    });\n\n    selectCell(nextPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver = rowIdx < draggedOverRowIdx\n      ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n      : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getSelectedCellProps(rowIdx: number): SelectedCellProps | EditCellProps<R> | undefined {\n    if (selectedPosition.rowIdx !== rowIdx) return;\n\n    if (selectedPosition.mode === 'EDIT') {\n      return {\n        mode: 'EDIT',\n        idx: selectedPosition.idx,\n        onKeyDown: handleKeyDown,\n        editorPortalTarget,\n        editorContainerProps: {\n          rowHeight,\n          scrollLeft,\n          scrollTop,\n          firstEditorKeyPress: selectedPosition.key,\n          onCommit: handleCommit,\n          onCommitCancel: closeEditor\n        },\n        editor2Props: {\n          rowHeight,\n          row: selectedPosition.row,\n          onRowChange: handleRowChange,\n          onClose: handleOnClose\n        }\n      };\n    }\n\n    return {\n      mode: 'SELECT',\n      idx: selectedPosition.idx,\n      onFocus: handleFocus,\n      onKeyDown: handleKeyDown,\n      dragHandleProps: enableCellDragAndDrop && isCellEditable(selectedPosition)\n        ? { onMouseDown: handleMouseDown, onDoubleClick: handleDoubleClick }\n        : undefined\n    };\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n      const row = rows[rowIdx];\n      const top = rowIdx * rowHeight + totalHeaderHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        rowElements.push(\n          <GroupRowRenderer<R, SR>\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={viewportColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            top={top}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedPosition.rowIdx === rowIdx ? selectedPosition.idx : undefined}\n            isRowSelected={isSelectable && row.childRows.every(cr => selectedRows?.has(cr[rowKey!]))}\n            eventBus={eventBus}\n            onFocus={selectedPosition.rowIdx === rowIdx ? handleFocus : undefined}\n            onKeyDown={selectedPosition.rowIdx === rowIdx ? handleKeyDown : undefined}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key: string | number = hasGroups ? startRowIndex : rowIdx;\n      let isRowSelected = false;\n      if (rowKey !== undefined) {\n        const rowId = row[rowKey];\n        isRowSelected = selectedRows?.has(rowId) ?? false;\n        if (typeof rowId === 'string' || typeof rowId === 'number') {\n          key = rowId;\n        }\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={viewportColumns}\n          eventBus={eventBus}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          rowClass={rowClass}\n          top={top}\n          copiedCellIdx={copiedPosition?.rowIdx === rowIdx ? copiedPosition.idx : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          selectedCellProps={getSelectedCellProps(rowIdx)}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx >= columns.length || selectedPosition.rowIdx >= rows.length) {\n    setSelectedPosition({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n    setCopiedPosition(null);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (selectedPosition.mode === 'EDIT' && rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx('rdg', { 'rdg-viewport-dragging': isDragging }, className)}\n      style={{\n        ...style,\n        '--header-row-height': `${headerRowHeight}px`,\n        '--filter-row-height': `${headerFiltersHeight}px`,\n        '--row-width': `${totalColumnWidth}px`,\n        '--row-height': `${rowHeight}px`\n      } as unknown as React.CSSProperties}\n      ref={gridRef}\n      onScroll={handleScroll}\n    >\n      <HeaderRow<R, K, SR>\n        rowKey={rowKey}\n        rows={rawRows}\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={selectedRows?.size === rawRows.length}\n        onSelectedRowsChange={onSelectedRowsChange}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        onSort={onSort}\n      />\n      {enableFilters && (\n        <FilterRow<R, SR>\n          columns={viewportColumns}\n          filters={filters}\n          onFiltersChange={onFiltersChange}\n        />\n      )}\n      {rows.length === 0 && emptyRowsRenderer ? createElement(emptyRowsRenderer) : (\n        <>\n          <div\n            ref={focusSinkRef}\n            tabIndex={0}\n            className=\"rdg-focus-sink\"\n            onKeyDown={handleKeyDown}\n          />\n          <div style={{ height: Math.max(rows.length * rowHeight, clientHeight) }} />\n          {getViewportRows()}\n          {summaryRows?.map((row, rowIdx) => (\n            <SummaryRow<R, SR>\n              aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n              key={rowIdx}\n              rowIdx={rowIdx}\n              row={row}\n              bottom={rowHeight * (summaryRows.length - 1 - rowIdx)}\n              viewportColumns={viewportColumns}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(\n  DataGrid as React.ForwardRefRenderFunction<DataGridHandle>\n) as <R, K extends keyof R, SR = unknown>(props: DataGridProps<R, K, SR> & React.RefAttributes<DataGridHandle>) => JSX.Element;\n"],"names":["useMemo","useRef","useEffect","useState","useLayoutEffect","cloneElement","createElement","useCallback","memo","forwardRef","createPortal","EditorContainer2","Cell","EditCell","GroupCell","SummaryCell","Row","useImperativeHandle","HeaderRow","FilterRow","SummaryRow"],"mappings":"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"}